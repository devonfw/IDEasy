cmd.--version=Gibt die Version von IDEasy aus.
cmd.--version.detail=Um die aktuelle Version von IDEasy auszugeben, brauchen Sie einfach nur 'ide --version' in die Konsole eingeben.
cmd.android-studio=Werkzeug Kommando für Android Studio (IDE).
cmd.android-studio.detail=Das android-studio Kommando ermöglicht die Installation, Konfiguration und den Start von Android Studio. Um Android Studio für Ihren aktuellen Arbeitsbereich und die IDEasy-Installation zu starten, führen Sie einfach: 'ide android-studio' aus. Detaillierte Dokumentation finden Sie unter https://developer.android.com/studio/.
cmd.aws=Werkzeug Kommando für AWS Kommandoschnittstelle.
cmd.aws.detail=Das AWS Command Line Interface (AWS CLI) ist ein Open-Source-Werkzeug zur Verwaltung von AWS Ressourcen. Detaillierte Dokumentation ist zu finden unter https://docs.aws.amazon.com/cli/
cmd.az=Werkzeug Kommando für Azure Kommandoschnittstelle.
cmd.az.detail=Das Azure Command-Line Interface (CLI) ist ein Werkzeug zur Erstellung und Verwaltung von Azure Ressourcen. Detaillierte Dokumentation ist zu finden unter https://learn.microsoft.com/en-us/cli/azure/
cmd.build=Startet einen build Prozess mit übergebenen Argumenten.
cmd.build.detail=Der `build`-Befehl ist eine Abstraktion von Build-Systemen wie https://maven.apache.org/, https://gradle.org/, https://yarnpkg.com/, https://www.npmjs.com/ usw.\nEr erkennt automatisch Ihr Build-System (anhand von Dateien wie `pom.xml`, `package.json` usw.). Entsprechend dieser Erkennung delegiert er einfach an den entsprechenden Befehl des spezifischen Build-Systems. Wenn dieses Build-System noch nicht verfügbar ist, wird es automatisch heruntergeladen und installiert.\nSo ermöglicht `ide build` Benutzern, jedes Projekt zu erstellen, ohne sich um das Build-System kümmern zu müssen. Weitere spezifische Build-Optionen können pro Projekt konfiguriert werden. Dies macht `ide build` zu einem universellen Bestandteil jeder _Definition of Done_. Bevor Sie Ihre Änderungen übertragen, führen Sie bitte immer den folgenden Befehl aus, um den Build zu überprüfen:\n\n`ide build`\n\nSie können auch zusätzliche Argumente wie `ide build «args»` angeben. Diese werden einfach an den erkannten Build-Befehl weitergeleitet (z. B. Aufruf von `mvn «args»`).
cmd.build.val.args=Argumente die bei dem build Prozess genutzt werden sollen.
cmd.complete=Internes Werkzeug für bash Autovervollständigung.
cmd.complete.detail=Geben Sie 'ide complete <ausdruck>' in die Konsole ein um die einfache Autovervollständigung zu aktivieren, ersetzen Sie <ausdruck> mit dem Ausdruck, der automatisch vervollständigt werden soll.\nZ.B. geben Sie einfach 'ide complete in' in die Konsole ein um 'install' und 'intellij' als Vorschläge zu erhalten.
cmd.create=Erstellt ein neues IDEasy Projekt.
cmd.create.detail=Erstellt ein neues IDEasy-Projekt im Projektverzeichnis (IDE_ROOT) unter Verwendung Ihrer benutzerdefinierten Projekteinstellungen. Wenn Sie die Standardeinstellungen verwenden möchten, müssen Sie '-' als <settings_repository> angeben. Wenn Sie '-' weglassen, erhalten Sie eine interaktive Abfrage für die Git-Settings-URL.
cmd.create.val.project=Der Name des zu erstellenden Projekts.
cmd.docker=Werkzeug Kommando für Docker.
cmd.docker.detail=Docker ist eine Plattform zum Erstellen, Verwalten und Ausführen von Anwendungen in isolierten Containern. Detaillierte Dokumentation zum Docker Command-Line Interface ist zu finden unter https://docs.docker.com/engine/reference/commandline/cli/
cmd.dotnet=Werkzeug Kommando für dotnet Kommandoschnittstelle.
cmd.dotnet.detail=Das .NET CLI (Command Line Interface) ist ein plattformübergreifendes Werkzeug zum Erstellen, Ausführen und Verwalten von .NET-Anwendungen. Detaillierte Dokumentation ist zu finden unter https://docs.microsoft.com/en-us/dotnet/core/tools/
cmd.eclipse=Werkzeug Kommando für Eclipse (IDE).
cmd.eclipse.detail=Eclipse ist eine Open-Source-Entwicklungsumgebung für die Entwicklung von Applikationen in Java, C++ und anderen Programmiersprachen. Detaillierte Dokumentation ist zu finden unter https://www.eclipse.org/documentation/
cmd.env=Gibt die zu setzenden und exportierenden Umgebungsvariablen aus.
cmd.env.detail=Um alle aktiven Umgebungsvariablen von IDEasy auszugeben, geben Sie einfach 'ide env' in die Konsole ein. Um zusätzlich noch die Ursprünge der Variablen ausgegeben zu bekommen, fügen Sie einfach das debug flag '--debug' hinzu z.B. 'ide --debug env'.
cmd.env.opt.--bash=Konvertiert Windows-Pfad-Syntax nach Bash zur Verwendung in git-bash.
cmd.gcviewer=Werkzeug Kommando für GC Viewer (Anzeige von Garbage-Collector Logs von Java).
cmd.gcviewer.detail=GCViewer ist ein Tool zur Analyse und Visualisierung von Java-Garbage-Collection-Protokollen. Detaillierte Dokumentation ist zu finden unter https://github.com/chewiebug/GCViewer
cmd.get-edition=Zeigt die Edition des selektierten Werkzeugs an.
cmd.get-edition.detail=Wenn die installierte und konfigurierte Edition des Werkzeugs nicht identisch sind, werden beide angezeigt. Die konfigurierte Edition kann durch das Kommando 'ide set-edition' angepasst werden.
cmd.get-edition.opt.--configured=zeigt nur die konfigurierte Edition
cmd.get-edition.opt.--installed=zeigt nur die installierte Edition
cmd.get-version=Zeigt die Version des selektierten Werkzeugs an.
cmd.get-version.detail=Wenn die installierte und konfigurierte Version des Werkzeugs nicht identisch sind, werden beide angezeigt. Die konfigurierte Version kann durch das Kommando 'ide set-version' angepasst werden.
cmd.get-version.opt.--configured=zeigt nur die konfigurierte Version
cmd.get-version.opt.--installed=zeigt nur die installierte Version
cmd.gh=Werkzeug Kommando für die Github Kommandoschnittstelle.
cmd.gh.detail=GitHub CLI (Command Line Interface) ermöglicht die Interaktion mit GitHub-Repositories, Issues und Pull Requests über die Befehlszeile. Detaillierte Dokumentation ist zu finden unter https://cli.github.com/manual/
cmd.graalvm=Werkzeug Kommando für GraalVm.
cmd.graalvm.detail=GraalVM ist eine leistungsstarke Laufzeitumgebung, die mehrere Sprachen und Ausführungsmodi unterstützt. Detaillierte Dokumentation ist zu finden unter https://www.graalvm.org/docs/
cmd.gradle=Werkzeug Kommando für Gradle (Build-Tool).
cmd.gradle.detail=Gradle ist ein Build-Automatisierungstool für Java, Kotlin und andere JVM-basierte Sprachen. Detaillierte Dokumentation ist zu finden unter https://docs.gradle.org/
cmd.helm=Werkzeug Kommando für Helm (Kubernetes Package Manager).
cmd.helm.detail=Helm ist ein Paketmanager für Kubernetes, der das Bereitstellen und Verwalten von Anwendungen vereinfacht. Detaillierte Dokumentation ist zu finden unter https://helm.sh/docs/
cmd.help=Zeigt diese Hilfe an.
cmd.help.detail=Die Hilfe-Details eines Kommandos können mit dem Befehl "ide help <commandlet>" ausgegeben werden.
cmd.install=Installiert das selektierte Werkzeug.
cmd.install-plugin=Installiert die selektierte Erweiterung für das selektierte Werkzeug.
cmd.install-plugin.detail=Erweiterung können nur für Werkzeuge installiert werden die diese unterstützen. Erweiterungen müssen in den Projekteinstellungen definiert sein um zur Installation verfügbar zu sein. Falls eine gewünschte Erweiterung nicht verfügbar ist, bitte den ide-admin kontaktieren.
cmd.install.detail=Die Liste an zur Installation verfügbaren Werkzeugen können mit dem Befehl "ide help" ausgegeben werden.
cmd.intellij=Werkzeug Kommando für Intellij (IDE)
cmd.intellij.detail=IntelliJ ist eine beliebte Java-Entwicklungsumgebung, von JetBrains entwickelt. Detaillierte Dokumentation ist zu finden unter https://www.jetbrains.com/idea/documentation/
cmd.jasypt=Werkzeug Kommando für Jasypt.
cmd.jasypt.detail=Jasypt ist eine Bibliothek zum Verschlüsseln und Entschlüsseln sensibler Daten in Java-Anwendungen. Detaillierte Dokumentation ist zu finden unter http://www.jasypt.org/
cmd.jasypt.val.command=Mode (encrypt | decrypt)
cmd.jasypt.val.masterPassword=master Passwort.
cmd.jasypt.val.secret=Das zu verschlüsselnde oder zu entschlüsselnde Geheimnis.
cmd.java=Werkzeug Kommando für Java (OpenJDK).
cmd.java.detail=Java kann zum Erstellen und Verbreiten von Java Anwendungen für PCs und Server verwendet werden. Detaillierte Dokumentation ist zu finden unter https://openjdk.org/
cmd.jmc=Werkzeug Kommando für JDK Mission Control (Performance Analyse).
cmd.jmc.detail=JDK Mission Control ist ein Profiling- und Überwachungswerkzeug für Java-Anwendungen. Detaillierte Dokumentation ist zu finden unter https://docs.oracle.com/en/java/java-components/jdk-mission-control/
cmd.kotlinc=Werkzeug Kommando für Kotlin (Compiler für JRE Sprache).
cmd.kotlinc.detail=Der Kotlin-Compiler (kotlinc) ist das Befehlszeilentool zum Kompilieren von Kotlin-Code. Detaillierte Dokumentation ist zu finden unter https://kotlinlang.org/docs/home.html
cmd.kotlincnative=Werkzeug Kommando für Kotlin-Native (Compiler für JRE Sprache).
cmd.kotlincnative.detail=Der Kotlin/Native-Compiler (kotlincnative) kompiliert Kotlin-Code in native ausführbare Dateien. Detaillierte Dokumentation ist zu finden unter https://kotlinlang.org/docs/reference/native-overview.html
cmd.lazydocker=Werkzeug Kommando für LazyDocker.
cmd.lazydocker.detail=Lazydocker ist ein einfaches Kommandozeilen-Benutzer-Interface für Docker und Docker-compose. Detaillierte Dokumentation ist zu finden unter https://github.com/jesseduffield/lazydocker
cmd.list-editions=Listet die verfügbaren Editionen des selektierten Werkzeugs auf.
cmd.list-editions.detail=Um alle verfügbaren Editionen von z.B. 'intellij' aufzulisten, geben Sie einfach 'ide list-editions intellij' in die Konsole ein.
cmd.list-versions=Listet die verfügbaren Versionen des selektierten Werkzeugs auf.
cmd.list-versions.detail=Um alle verfügbaren Versionen von z.B. 'intellij' aufzulisten, geben Sie einfach 'ide list-versions intellij' in die Konsole ein.
cmd.mvn=Werkzeug Kommando für Maven (Build-Werkzeug).
cmd.mvn.detail=Apache Maven ist ein Build-Automatisierungs- und Abhängigkeitsverwaltungstool für Java-Projekte. Detaillierte Dokumentation ist zu finden unter https://maven.apache.org/guides/index.html
cmd.node=Werkzeug Kommando für Node.js (JavaScript Laufzeitumgebung).
cmd.node.detail=Node.js ist eine JavaScript-Laufzeitumgebung für serverseitige Anwendungen. Detaillierte Dokumentation ist zu finden unter https://nodejs.org/en/docs/
cmd.npm=Werkzeug Kommando für Npm (JavaScript Node Package Manager).
cmd.npm.detail=npm wird zur Verwaltung von JavaScript-Paketen verwendet. Detaillierte Dokumentation ist zu finden unter https://docs.npmjs.com/
cmd.oc=Werkzeug Kommando für Openshift CLI (Kubernetes Management Tool).
cmd.oc.detail=OpenShift CLI (oc) ist ein Befehlszeilentool zur Verwaltung von OpenShift-Clustern. Detaillierte Dokumentation ist zu finden unter https://docs.openshift.com/
cmd.pgadmin=Werkzeug Kommando für pgAdmin.
cmd.pgadmin.detail=pgAdmin ist ein Open-Source-Verwaltungswerkzeug for PostgreSQL und verwandte relationale Datenbanken. Detaillierte Dokumentation ist zu finden unter https://www.pgadmin.org/docs/pgadmin4/latest/index.html
cmd.quarkus=Werkzeug Kommando für Quarkus (Framework für Cloud-native Anwendungen).
cmd.quarkus.detail=Quarkus ist ein Kubernetes-native Java-Framework zur Entwicklung von Cloud-native Anwendungen. Detaillierte Dokumentation ist zu finden unter https://quarkus.io/
cmd.repository=Richtet das vorkonfigurierte Git Repository ein.
cmd.repository.detail=Dies wird alle vorkonfigurierten Repositories einrichten. Rufen Sie einfach 'ide repository setup <your_project_name>' auf, ersetzen Sie <your_project_name> durch den Namen Ihrer Projektkonfigurationsdatei, die sich in 'settings/repository/your_project_name' befindet und IDEasy wird Ihr Projekt basierend auf der vorhandenen Eigenschaftsdatei automatisch klonen, bauen und einrichten.\nWenn Sie den Projektnamen weglassen, werden alle im Repository-Verzeichnis gefundenen Projekte vorkonfiguriert.
cmd.repository.val.repository=Der Name der Properties-Datei des vorkonfigurierten Git Repositories zum Einrichten. Falls nicht angegeben, werden alle aktiven Projekte eingerichtet.
cmd.set-edition=Setzt die Edition des selektierten Werkzeugs.
cmd.set-edition.detail=Dies setzt die entsprechende Werkzeug-Edition Variable in der Konfigurationsdatei. Um solche Anpassungen auszurollen und mit dem Team zu teilen, kann diese im Settings git repository committed und gepushed werden.\nDiese Änderungen werden in der projektspezifischen Konfiguration gespeichert, es sei denn es wird mit --conf --home oder --workspace einen anderer Benutzer- oder Workspace-spezifischer Speicherort definiert.
cmd.set-edition.opt.--cfg=Auswahl der Konfigurationsdatei (settings | home | conf | workspace).
cmd.set-version=Setzt die Version des selektierten Werkzeugs.
cmd.set-version.detail=Dies setzt die entsprechende Werkzeug-Version Variable in der Konfigurationsdatei. Um solche Anpassungen auszurollen und mit dem Team zu teilen, kann diese im Settings git repository committed und gepushed werden.\nDiese Änderungen werden in der projektspezifischen Konfiguration gespeichert, es sei denn es wird mit --conf --home oder --workspace einen anderer Benutzer- oder Workspace-spezifischer Speicherort definiert.
cmd.set-version.opt.--cfg=Auswahl der Konfigurationsdatei (settings | home | conf | workspace).
cmd.set-version.val.version=Die zu setzende Werkzeug Version.
cmd.shell=Kommando zum Starten der integrierten Shell mit erweiterter Autovervollständigung.
cmd.shell.detail=Die integrierte Shell bietet Konsolenbenutzer*Innen eine neue Benutzererfahrung mit einer erweiterten Autovervollständigung. Die meisten Eingaben können in diesem Modus vervollständigt werden.\nIDEasy liefert zu vielen passende Kommandos wie z.B. 'install' oder Optionen wie z.B. '-t' bei der Betätigung der Tab-Taste, Vorschläge für die Autovervollständigung eines Ausdrucks wie z.B. 'in' für 'install' und 'intellij'. Sie können die Tab-Taste verwenden, um zwischen beiden Vorschlägen zu wechseln. Benutzer, die mit Git Bash vertraut sind, werden sich sofort zurechtfinden, da die Tab-Funktion auf die gleiche Weise funktioniert.\nDiese Funktionalität wird von JLine3 unterstützt, das erweiterte Autovervollständigungsfunktionen bietet, einschließlich der Cursor-Navigation innerhalb der vorgeschlagenen Optionen.\nUm den Modus wieder zu verlassen, drücken Sie einfach 'STRG+C' oder 'STRG+D' oder geben 'exit' in die Konsole ein.
cmd.sonar=Werkzeug Kommando für SonarQube.
cmd.sonar.detail=SonarQube ist eine Plattform für die kontinuierliche Code-Qualitätsprüfung. Detaillierte Dokumentation ist zu finden unter https://docs.sonarqube.org/
cmd.sonar.val.command=Auszuführende Aktion (START|STOP|ANALYZE)
cmd.terraform=Werkzeug Kommando für Terraform.
cmd.terraform.detail=Terraform ist ein Tool für Infrastructure as Code zur Verwaltung von Cloud-Ressourcen. Detaillierte Dokumentation ist zu finden unter https://www.terraform.io/docs/index.html
cmd.tomcat=Werkzeug Kommando für Tomcat
cmd.tomcat.detail=Tomcat ist ein leistungsstarker Open-Source-Webserver und Servlet-Container für Java-Anwendungen.
cmd.tomcat.val.command=Auszuführende Aktion ( START | STOP )
cmd.uninstall=Deinstalliert das ausgewählte Werkzeug.
cmd.uninstall-plugin=Deinstalliert die selektierte Erweiterung für das selektierte Werkzeug.
cmd.uninstall-plugin.detail=Erweiterung können nur für Werkzeuge installiert und deinstalliert werden die diese unterstützen. Mit dem Befehl "ide install-plugin" kann die Erweiterung wieder hergestellt werden.
cmd.uninstall.detail=Wird dazu verwendet um jedwedes Werkzeug zu deinstallieren. Um z.B. Java zu deinstallieren geben Sie einfach 'uninstall java' in die Konsole ein.
cmd.update=Updatet die Settings, Software und Repositories.
cmd.update.detail=Um die IDE auf den neuesten Stand zu bringen (falls von Ihrem Admin angewiesen) geben Sie einfach 'ide update' in die Konsole ein.
cmd.vscode=Werkzeug Kommando für Visual Studio Code (IDE).
cmd.vscode.detail=Visual Studio Code (VS Code) ist ein beliebter Code-Editor, der von Microsoft entwickelt wurde. Detaillierte Dokumentation ist zu finden unter https://code.visualstudio.com/docs/
commandlets=Verfügbare Kommandos:
opt.--batch=Aktiviert den Batch-Modus (nicht-interaktive Stapelverarbeitung).
opt.--debug=Aktiviert Debug-Ausgaben (Fehleranalyse).
opt.--force=Aktiviert den Force-Modus (Erzwingen).
opt.--locale=Die Spracheinstellungen (z.B. 'en' für Englisch).
opt.--offline=Aktiviert den Offline-Modus (Überspringt Aktualisierungen oder git pull, schlägt fehl bei Downloads or git clone).
opt.--quiet=Deaktiviert Info Logging ( nur success, warning und error).
opt.--skip-repositories=Überspringt die Einrichtung der Repositories.
opt.--skip-tools=Überspringt die Installation/Aktualisierung der Tools.
opt.--trace=Aktiviert Trace-Ausgaben (detaillierte Fehleranalyse).
opt.--version=Zeigt die IDE Version an und beendet das Programm.
options=Optionen:
toolcommandlets=Verfügbare Werkzeug Kommandos:
usage=Verwendung:
val.args=Die Kommandozeilen-Argumente zur Übergabe an das Werkzeug.
val.cfg=Auswahl der Konfigurationsdatei (settings | home | conf | workspace).
val.commandlet=Das ausgewählte Commandlet ("ide help" verwenden, um alle Commandlets aufzulisten).
val.edition=Die Werkzeug Edition.
val.plugin=Die zu selektierende Erweiterung.
val.settingsRepository=Das settings git Repository mit den IDEasy Einstellungen für das Projekt.
val.tool=Das zu selektierende Werkzeug Kommando.
val.version=Die Werkzeug Version.
values=Werte:
version-banner=Die aktuelle Version der IDE ist {}.
